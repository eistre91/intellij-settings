<application>
  <component name="ReplCommandManager">
    <repl-command name="Entity Changes" executionType="EXPRESSION" commandText="(require '[datomic.api :as d])&#10;&#10;(defn entity-changes&#10;  &quot;Return transaction history for an entity and its components.&#10;  Returns a sequence of maps, each is the transaction map (tx metadata) plus a&#10;  key `:entity-changes`, which is a nested map of keys: entity id, attribute&#10;  ident, `:db/add` or `:db/retract`, and the value added or retracted, e.g.:&#10;      {12345678910 {:long-card-1-attr          {:db/retract 1&#10;                                                :db/add     0}&#10;                    :long-card-many-attr       {:db/add     #{0}}&#10;                    :ref-card-1-component-attr {:db/add     12345678911}}&#10;       12345678911 {:long-card-1-attr          {:db/add     2}}}`&quot;&#10;  [db root-entity]&#10;  (-&gt;&gt; (d/q '[:find ?e ?kw ?v ?added ?tx&#10;              :in % ?root $hist&#10;              :where&#10;              ($hist ent+comp ?root ?e ?a ?v ?tx ?added)&#10;              [(datomic.api/ident $hist ?a) ?kw]]&#10;         '[[(ent+comp [?root] ?e ?a ?v ?tx ?added)&#10;            [?root ?nexta ?root2]&#10;            [?nexta :db/isComponent true]&#10;            (ent+comp ?root2 ?e ?a ?v ?tx ?added)]&#10;           [(ent+comp [?root] ?e ?a ?v ?tx ?added)&#10;            [?root ?a ?v ?tx ?added]&#10;            [(identity ?root) ?e]]]&#10;         (d/entid db root-entity)&#10;         (d/history db))&#10;       (group-by peek)&#10;       (sort-by key)&#10;       (map (fn [[tx datoms]]&#10;              (assoc (d/pull db '[*] tx)&#10;                :entity-changes&#10;                (-&gt;&gt; datoms&#10;                     (map #(vec (take 4 %)))&#10;                     (sort-by peek)&#10;                     (reduce (fn [acc [e a v add?]]&#10;                               (if (= (:cardinality (d/attribute db a)) :db.cardinality/many)&#10;                                 (update-in acc [e a (if add? :db/add :db/retract)] (fnil conj #{}) v)&#10;                                 (assoc-in acc [e a (if add? :db/add :db/retract)] v))) {})))))))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" />
    <repl-command name="Jib WHAT" executionType="EXPRESSION" commandText="(def phi (-&gt; server :_cache (get &quot;phi-fhir-test&quot;) deref :conn))&#10;(defn what [id] (d/pull (d/db phi) '[*] id))" executeBefore="NONE" executionNs="REPL_CURRENT" inNamespace="" />
  </component>
</application>